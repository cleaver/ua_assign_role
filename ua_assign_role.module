<?php

/**
 * @file ua_assign_role.module
 *
 * Assign a role based on HTTP_USER_AGENT.
 */

/**
 * Implements hook_permission().
 */
function ua_assign_role_permission() {
  return array(
    'administer ua_assign_role' => array(
      'title' => t('Administer User-agent Assign Role'),
      'description' => t('Perform administration tasks for User-agent Assign Role.'),
      'restrict access' => true,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ua_assign_role_menu() {
  $items['admin/config/development/ua-assign-role'] = array(
    'title' => 'User-agent Assign Role',
    'description' => 'Settings for User-agent Assign Role',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ua_assign_role_admin'),
    'access arguments' => array('administer ua_assign_role'),
    'file' => 'ua_assign_role.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_boot().
 */
function ua_assign_role_boot() {
  global $user;
  // check user agent
  if ( !$user->uid == 0
    || !_ua_assign_role_check_agent()) {
    return;
  }
  $new_role = variable_get('ua_assign_role_role');
  if (sizeof($new_role) == 1){
    $user->roles += $new_role;
  }
}


/**
 * Check if user-agent matches predefined values.
 *
 * @return bool
 *    TRUE if matches.
 */
function _ua_assign_role_check_agent() {
  foreach (variable_get('ua_assign_role_user_agents') as $agent) {
    $agent_substr = substr($_SERVER['HTTP_USER_AGENT'], 0, strlen($agent));
    if ($agent == $agent_substr) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * @param $ip string
 *    IP address to check - assumes valid
 * @param $cidr string
 *    Subnet specification in CIDR form
 * @return bool
 *    True if $ip is in $cidr
 */
function _ua_assign_role_in_cidr($ip, $cidr) {
  if (strpos($ip, ':')) {
    // ipv6
    $pattern = '/([\da-f:]+)\/(\d+)/i';
    $max_length = 128;
    $version = 6;
  }
  else {
    // ipv4
    $pattern = '/([\d\.]+)\/(\d+)/';
    $max_length = 32;
    $version = 4;
  }
  preg_match($pattern, $cidr, $match);
  if (empty($match)) {
    return false;
  }
  list(, $addr, $subnet) = $match;
  if (!is_numeric($subnet) || $subnet > $max_length || $subnet < 0) {
    return false;
  }
  $cidr_binary = _ua_assign_role_ip_to_binary($addr, $subnet, $version);
  $ip_binary = _ua_assign_role_ip_to_binary($ip, $subnet, $version);
  return $cidr_binary == $ip_binary;
}

/**
 * Convert an IP address to string binary.
 *
 * @param string $addr
 *    The IP address as a string.
 * @param integer $truncate
 *    Number of bits to return.
 * @param integer $version
 *    4 for IPV4 or 6 for IPV6.
 * @return string
 *    IP address in binary form as a string.
 */
function _ua_assign_role_ip_to_binary($addr, $truncate, $version) {
  if ($version == 6) {
    $base = 16;
    $size = 16;
    $delimiter = ':';
  }
  else {
    $base = 10;
    $size = 8;
    $delimiter = '.';
  }
  $to_binary_func = function ($carry, $item) use ($base, $size) {
    return $carry . str_pad(base_convert($item, $base, 2), $size, '0', STR_PAD_LEFT);
  };
  $binary_addr = substr(array_reduce(explode($delimiter, $addr), $to_binary_func), 0, $truncate);
  return $binary_addr;
}
